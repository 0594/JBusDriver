apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt3插件

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "me.jbusdriver"
        minSdkVersion 16
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "github"
    }

    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEYSTORE_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ignored) {
                if (System.getenv("KEYSTORE_FILE") != null) {
                    storeFile = file(System.getenv("KEYSTORE_FILE"))
                    storePassword = System.getenv("KEYSTORE_PWD")
                    keyAlias = System.getenv("KEYSTORE_ALIAS")
                    keyPassword = System.getenv("KEYSTORE_ALIAS_PWD")
                } else {
                    throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
                }
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    kapt {
        generateStubs = true
        useBuildCache = true
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    variant.mergedFlavor.versionName = VersionName()
                    variant.mergedFlavor.versionCode = VersionCode()
                    variant.outputs.all { output ->
                        output.setVersionNameOverride(VersionName())
                        output.setVersionCodeOverride(VersionCode())
                        outputFileName = "JubsDriver[v${variant.versionName}]_(code_${variant.versionCode}).apk"
                    }
                }

            }

        }


    }
    productFlavors {
        gayhub {
            dimension "github"
            manifestPlaceholders = [UMENG_KEY: "58e8ecaa7666134a5a001740",
                                    CHANNEL  : "gayhub"]
        }
    }
}

//使用git的Tag来自动定制Version
def VersionCode() {
    def cmd = 'git rev-list master --first-parent --count'//master分支
//    def cmd = 'git tag'
//    def code = cmd.execute().text.trim().split("\n").size()
    def code = cmd.execute().text.trim().toInteger()
    logger.quiet(cmd + " >>>> code = " + code)
    return code
}

//使用git的Tag来自动定制Version
def VersionName() {
    def cmd = 'git tag'
    def tags = cmd.execute().text.readLines()
    /* if (tags.size() >= 1) {
         def version_last = tags.last().trim() //newest
         cmd = 'git rev-list ' + version_last + '..  --count'
         if (tags.size() >= 2) {
             tags.remove(tags.last())
             def version_last_2 = tags.last().trim() //newest
             cmd = 'git rev-list ' + version_last_2 + '..' + version_last + '  --count'
         }
     } else {
         cmd = 'git rev-list  --count'
     }*/
    cmd = 'git rev-list  --all  --count'
    def code = cmd.execute().text.trim().toInteger()

    def versionName = tags.last().trim().replaceAll("[a-zA-Z]", "") + "build" + code
    logger.quiet(cmd + " >>>> versionName  = " + versionName)

    return versionName
}


dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    androidTestImplementation("com.android.support.test.espresso:espresso-core:2.3-alpha", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    testImplementation "junit:junit:4.12"

    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support:design:${versions.supportLibrary}"
    implementation "com.android.support:cardview-v7:${versions.supportLibrary}"
    implementation "com.android.support:palette-v7:${versions.supportLibrary}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    /*============================================added======================================================*/
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "com.afollestad.material-dialogs:core:${versions.material_dialogs_core}"
    implementation "com.orhanobut:logger:${versions.logger}"
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${versions.BaseRecyclerViewAdapterHelper}"
    implementation "org.jsoup:jsoup:${versions.jsoup}"
    //group: "org.jsoup", name: "jsoup", version: "1.11.1"
    implementation "com.xw.repo:bubbleseekbar:${versions.bubbleseekbar}-lite"

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
//    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"

    implementation("com.github.bumptech.glide:glide:${versions.glide}") {
        exclude group: "com.android.support"
    }
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${versions.glide}"


    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxkotlin}"
    implementation "com.jakewharton.rxrelay2:rxrelay:${versions.rxrelay}"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar"

    //sqllite
    implementation "com.squareup.sqlbrite3:sqlbrite:${versions.sqlbrite}"
    implementation "com.squareup.sqlbrite3:sqlbrite-kotlin:${versions.sqlbrite}"
    implementation "android.arch.persistence:db-framework:${versions.db_framework}"

    implementation "com.gyf.barlibrary:barlibrary:${versions.immersionBar}"
    implementation "com.xiaofeng.android:flowlayoutmanager:${versions.flowlayoutmanager}"
    //https://github.com/xiaofeng-han/AndroidLibs/tree/master/flowlayoutmanager
    implementation "com.umeng.analytics:analytics:${versions.analytics}"

    //stetho
    implementation "com.facebook.stetho:stetho:${versions.stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"

    //leak
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}"

}

configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}
