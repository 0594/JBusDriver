apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'//kapt3插件

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "me.jbusdriver"
        minSdkVersion 16
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "github"

    }

    signingConfigs {
        release {
            try {
                storeFile file(KEYSTORE_FILE)
                storePassword KEYSTORE_PASSWORD
                keyAlias KEYSTORE_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ignored) {
                if (System.getenv("KEYSTORE_FILE") != null) {
                    storeFile = file(System.getenv("KEYSTORE_FILE"))
                    storePassword = System.getenv("KEYSTORE_PWD")
                    keyAlias = System.getenv("KEYSTORE_ALIAS")
                    keyPassword = System.getenv("KEYSTORE_ALIAS_PWD")
                } else {
                    throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
                }
            }
        }
    }
    lintOptions {
        abortOnError false
    }
    kapt {
        generateStubs = true
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    variant.mergedFlavor.versionName = VersionName()
                    variant.mergedFlavor.versionCode = VersionCode()
                    variant.outputs.all { output ->
                        output.setVersionNameOverride(VersionName())
                        output.setVersionCodeOverride(VersionCode())
                        outputFileName  = "JubsDriver[v${variant.versionName}]_(code_${variant.versionCode}).apk"
                    }
                }

            }

        }


    }
    productFlavors {
        gayhub {
            dimension "github"
            manifestPlaceholders = [UMENG_KEY: "58e8ecaa7666134a5a001740",
                                    CHANNEL  : "gayhub"]
        }
    }
}

def releaseTime() {
    return new Date().format("yyyyMMdd_HHmmss")
}

//使用git的Tag来自动定制Version
def VersionCode() {
    def cmd = 'git rev-list master --first-parent --count'//master分支
//    def cmd = 'git tag'
//    def code = cmd.execute().text.trim().split("\n").size()
    def code = cmd.execute().text.trim().toInteger()
    logger.quiet(cmd + " >>>> code = " + code)
    return code
}

//使用git的Tag来自动定制Version
def VersionName() {
    def cmd = 'git tag'
    def tags = cmd.execute().text.readLines()
    /* if (tags.size() >= 1) {
         def version_last = tags.last().trim() //newest
         cmd = 'git rev-list ' + version_last + '..  --count'
         if (tags.size() >= 2) {
             tags.remove(tags.last())
             def version_last_2 = tags.last().trim() //newest
             cmd = 'git rev-list ' + version_last_2 + '..' + version_last + '  --count'
         }
     } else {
         cmd = 'git rev-list  --count'
     }*/
    cmd = 'git rev-list  --all  --count'
    def code = cmd.execute().text.trim().toInteger()

    def versionName = tags.last().trim().replaceAll("[a-zA-Z]", "") + "build" + code
    logger.quiet(cmd + " >>>> versionName  = " + versionName)

    return versionName
}



dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.3-alpha', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support:design:${versions.supportLibrary}"
    implementation "com.android.support:cardview-v7:${versions.supportLibrary}"
    implementation "com.android.support:palette-v7:${versions.supportLibrary}"
    testImplementation  'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    /*============================================added======================================================*/
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.orhanobut:logger:2.1.1'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34'
    implementation  'org.jsoup:jsoup:1.11.1' //group: 'org.jsoup', name: 'jsoup', version: '1.11.1'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.github.bumptech.glide:glide:4.3.0'
    kapt  'com.github.bumptech.glide:compiler:4.3.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.3.0'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
//    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'


    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.3@aar'

    //sqllite
    implementation 'com.squareup.sqlbrite2:sqlbrite:2.0.0'
    implementation 'com.squareup.sqlbrite2:sqlbrite-kotlin:2.0.0'

    implementation 'com.jaeger.statusbarutil:library:1.4.0'
    implementation 'com.xiaofeng.android:flowlayoutmanager:1.2.3.2'
    implementation 'com.umeng.analytics:analytics:6.1.2'

    //leak
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

}

configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}